I.Choix des structures de données:

1. Customer(Client): Un client possède: un nom et un prénom tous les deux de type pointeur sur char
(pour les represénter en chaîne de charactères); un id de type int(une sorte de matricule qui sera probablement aléatoire);
et d'une date de naissance de type int aussi; l'option de la représenter en chaîne de charactère est valide, mais je voulais 
éviter tous les problème lié à des formatage différents.

2. Car(Voiture): Une voiture est un petit peu plus complexe à représenter; elle a une marque (make) 
et un model (tous les deux des pointeur sur char), un matricule physique (plate, celui present sur sa carte grise) qui est
lui aussi un pointeur sur char, une classe (e.g. sedan, citadine, coupé...) représenté aussi par un pointeur sur char, un prix
de location (cost) représenté par un float, un statut (status) (e.g. en location, en réparation...) qui est un pointeur sur char, 
un booléen represéntant la disponibilité de la voiture(availability), un nombre de places (nbr_seats), un kilométrage (mileage), 
une année (year), un matricule pour l'identification par le programme, et enfin, le kilométrage lors de la dernière vidange (locm),
tous représenté par un int. L'implémentation de la variable locm permettera au programme de prévoir les prochaines vidanges.

3. Rent(Location): Une location est considerée comme une transaction; elle a donc une date et une durée (duration) en plus de son 
propre ID, celui de la voiture, et celui du client.

4. Customer_List(Liste de clients): Simplement une structure possédant deux variables: Un client(mentionné en 1) et un pointeur sur 
le prochain client, pour permettre à l'utilisateur de garder les informations de ces clients de façon ordonnée.

5. Fleet(Flotte): Une structure regroupant toutes les voitures que l'entreprise possède. Elle est composé d'une voiture et d'un 
pointeur vers la prochaine voiture.

Rent_List(Liste des locations): Elle permet de stocker toutes les transactions de location de voiture que l'entreprise à pu effectuer,
elle a une location et un pointeur vers la prochaine location.